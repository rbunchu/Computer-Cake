
ComputerCake.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000256  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000256  000002ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000300  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000049c  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003e0  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000255  00000000  00000000  00000bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002d4  00000000  00000000  00000e54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d6  00000000  00000000  00001128  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000011fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	e6 e5       	ldi	r30, 0x56	; 86
  24:	f2 e0       	ldi	r31, 0x02	; 2
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	a4 36       	cpi	r26, 0x64	; 100
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	0e c1       	rjmp	.+540    	; 0x252 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include <stdlib.h>


int main(void)
{
	DDRB = 0b000011;
  38:	83 e0       	ldi	r24, 0x03	; 3
  3a:	87 bb       	out	0x17, r24	; 23
	//Set 5V to PB1 to light up a power diode
	PORTB = 0b000010;
  3c:	82 e0       	ldi	r24, 0x02	; 2
  3e:	88 bb       	out	0x18, r24	; 24
	
    /* Replace with your application code */
    while (1) 
    {
		for(int index = 0; index < rand() % 50 + 1; ++index)
  40:	c2 e3       	ldi	r28, 0x32	; 50
  42:	d0 e0       	ldi	r29, 0x00	; 0
		{
			PORTB |= 0b000001 << PINB0;
			_delay_ms(10);
			PORTB ^= 0b000001 << PINB0;
  44:	dd 24       	eor	r13, r13
  46:	d3 94       	inc	r13
		}
		//Delay between blinks
		int waitTime = rand() % 100 + 10;
  48:	04 e6       	ldi	r16, 0x64	; 100
  4a:	10 e0       	ldi	r17, 0x00	; 0
	PORTB = 0b000010;
	
    /* Replace with your application code */
    while (1) 
    {
		for(int index = 0; index < rand() % 50 + 1; ++index)
  4c:	e1 2c       	mov	r14, r1
  4e:	f1 2c       	mov	r15, r1
  50:	9a d0       	rcall	.+308    	; 0x186 <rand>
  52:	be 01       	movw	r22, r28
  54:	27 d0       	rcall	.+78     	; 0xa4 <__divmodhi4>
  56:	01 96       	adiw	r24, 0x01	; 1
  58:	e8 16       	cp	r14, r24
  5a:	f9 06       	cpc	r15, r25
  5c:	74 f4       	brge	.+28     	; 0x7a <__SREG__+0x3b>
		{
			PORTB |= 0b000001 << PINB0;
  5e:	c0 9a       	sbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  60:	8f e4       	ldi	r24, 0x4F	; 79
  62:	93 ec       	ldi	r25, 0xC3	; 195
  64:	01 97       	sbiw	r24, 0x01	; 1
  66:	f1 f7       	brne	.-4      	; 0x64 <__SREG__+0x25>
  68:	00 c0       	rjmp	.+0      	; 0x6a <__SREG__+0x2b>
  6a:	00 00       	nop
			_delay_ms(10);
			PORTB ^= 0b000001 << PINB0;
  6c:	88 b3       	in	r24, 0x18	; 24
  6e:	8d 25       	eor	r24, r13
  70:	88 bb       	out	0x18, r24	; 24
	PORTB = 0b000010;
	
    /* Replace with your application code */
    while (1) 
    {
		for(int index = 0; index < rand() % 50 + 1; ++index)
  72:	9f ef       	ldi	r25, 0xFF	; 255
  74:	e9 1a       	sub	r14, r25
  76:	f9 0a       	sbc	r15, r25
  78:	eb cf       	rjmp	.-42     	; 0x50 <__SREG__+0x11>
			PORTB |= 0b000001 << PINB0;
			_delay_ms(10);
			PORTB ^= 0b000001 << PINB0;
		}
		//Delay between blinks
		int waitTime = rand() % 100 + 10;
  7a:	85 d0       	rcall	.+266    	; 0x186 <rand>
  7c:	b8 01       	movw	r22, r16
  7e:	12 d0       	rcall	.+36     	; 0xa4 <__divmodhi4>
  80:	0a 96       	adiw	r24, 0x0a	; 10
			
		for(int index = 0; index < waitTime; ++index)
  82:	18 16       	cp	r1, r24
  84:	19 06       	cpc	r1, r25
  86:	14 f7       	brge	.-60     	; 0x4c <__SREG__+0xd>
  88:	20 e0       	ldi	r18, 0x00	; 0
  8a:	30 e0       	ldi	r19, 0x00	; 0
  8c:	e7 e8       	ldi	r30, 0x87	; 135
  8e:	f3 e1       	ldi	r31, 0x13	; 19
  90:	31 97       	sbiw	r30, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <__SREG__+0x51>
  94:	00 c0       	rjmp	.+0      	; 0x96 <__SREG__+0x57>
  96:	00 00       	nop
  98:	2f 5f       	subi	r18, 0xFF	; 255
  9a:	3f 4f       	sbci	r19, 0xFF	; 255
  9c:	28 17       	cp	r18, r24
  9e:	39 07       	cpc	r19, r25
  a0:	ac f3       	brlt	.-22     	; 0x8c <__SREG__+0x4d>
  a2:	d4 cf       	rjmp	.-88     	; 0x4c <__SREG__+0xd>

000000a4 <__divmodhi4>:
  a4:	97 fb       	bst	r25, 7
  a6:	07 2e       	mov	r0, r23
  a8:	16 f4       	brtc	.+4      	; 0xae <__divmodhi4+0xa>
  aa:	00 94       	com	r0
  ac:	06 d0       	rcall	.+12     	; 0xba <__divmodhi4_neg1>
  ae:	77 fd       	sbrc	r23, 7
  b0:	08 d0       	rcall	.+16     	; 0xc2 <__divmodhi4_neg2>
  b2:	0b d0       	rcall	.+22     	; 0xca <__udivmodhi4>
  b4:	07 fc       	sbrc	r0, 7
  b6:	05 d0       	rcall	.+10     	; 0xc2 <__divmodhi4_neg2>
  b8:	3e f4       	brtc	.+14     	; 0xc8 <__divmodhi4_exit>

000000ba <__divmodhi4_neg1>:
  ba:	90 95       	com	r25
  bc:	81 95       	neg	r24
  be:	9f 4f       	sbci	r25, 0xFF	; 255
  c0:	08 95       	ret

000000c2 <__divmodhi4_neg2>:
  c2:	70 95       	com	r23
  c4:	61 95       	neg	r22
  c6:	7f 4f       	sbci	r23, 0xFF	; 255

000000c8 <__divmodhi4_exit>:
  c8:	08 95       	ret

000000ca <__udivmodhi4>:
  ca:	aa 1b       	sub	r26, r26
  cc:	bb 1b       	sub	r27, r27
  ce:	51 e1       	ldi	r21, 0x11	; 17
  d0:	07 c0       	rjmp	.+14     	; 0xe0 <__udivmodhi4_ep>

000000d2 <__udivmodhi4_loop>:
  d2:	aa 1f       	adc	r26, r26
  d4:	bb 1f       	adc	r27, r27
  d6:	a6 17       	cp	r26, r22
  d8:	b7 07       	cpc	r27, r23
  da:	10 f0       	brcs	.+4      	; 0xe0 <__udivmodhi4_ep>
  dc:	a6 1b       	sub	r26, r22
  de:	b7 0b       	sbc	r27, r23

000000e0 <__udivmodhi4_ep>:
  e0:	88 1f       	adc	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	5a 95       	dec	r21
  e6:	a9 f7       	brne	.-22     	; 0xd2 <__udivmodhi4_loop>
  e8:	80 95       	com	r24
  ea:	90 95       	com	r25
  ec:	bc 01       	movw	r22, r24
  ee:	cd 01       	movw	r24, r26
  f0:	08 95       	ret

000000f2 <do_rand>:
  f2:	8f 92       	push	r8
  f4:	9f 92       	push	r9
  f6:	af 92       	push	r10
  f8:	bf 92       	push	r11
  fa:	cf 92       	push	r12
  fc:	df 92       	push	r13
  fe:	ef 92       	push	r14
 100:	ff 92       	push	r15
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	ec 01       	movw	r28, r24
 108:	68 81       	ld	r22, Y
 10a:	79 81       	ldd	r23, Y+1	; 0x01
 10c:	8a 81       	ldd	r24, Y+2	; 0x02
 10e:	9b 81       	ldd	r25, Y+3	; 0x03
 110:	61 15       	cp	r22, r1
 112:	71 05       	cpc	r23, r1
 114:	81 05       	cpc	r24, r1
 116:	91 05       	cpc	r25, r1
 118:	21 f4       	brne	.+8      	; 0x122 <do_rand+0x30>
 11a:	64 e2       	ldi	r22, 0x24	; 36
 11c:	79 ed       	ldi	r23, 0xD9	; 217
 11e:	8b e5       	ldi	r24, 0x5B	; 91
 120:	97 e0       	ldi	r25, 0x07	; 7
 122:	2d e1       	ldi	r18, 0x1D	; 29
 124:	33 ef       	ldi	r19, 0xF3	; 243
 126:	41 e0       	ldi	r20, 0x01	; 1
 128:	50 e0       	ldi	r21, 0x00	; 0
 12a:	55 d0       	rcall	.+170    	; 0x1d6 <__divmodsi4>
 12c:	49 01       	movw	r8, r18
 12e:	5a 01       	movw	r10, r20
 130:	27 ea       	ldi	r18, 0xA7	; 167
 132:	31 e4       	ldi	r19, 0x41	; 65
 134:	40 e0       	ldi	r20, 0x00	; 0
 136:	50 e0       	ldi	r21, 0x00	; 0
 138:	35 d0       	rcall	.+106    	; 0x1a4 <__mulsi3>
 13a:	6b 01       	movw	r12, r22
 13c:	7c 01       	movw	r14, r24
 13e:	2c ee       	ldi	r18, 0xEC	; 236
 140:	34 ef       	ldi	r19, 0xF4	; 244
 142:	4f ef       	ldi	r20, 0xFF	; 255
 144:	5f ef       	ldi	r21, 0xFF	; 255
 146:	c5 01       	movw	r24, r10
 148:	b4 01       	movw	r22, r8
 14a:	2c d0       	rcall	.+88     	; 0x1a4 <__mulsi3>
 14c:	dc 01       	movw	r26, r24
 14e:	cb 01       	movw	r24, r22
 150:	8c 0d       	add	r24, r12
 152:	9d 1d       	adc	r25, r13
 154:	ae 1d       	adc	r26, r14
 156:	bf 1d       	adc	r27, r15
 158:	b7 ff       	sbrs	r27, 7
 15a:	03 c0       	rjmp	.+6      	; 0x162 <do_rand+0x70>
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	a1 09       	sbc	r26, r1
 160:	b0 48       	sbci	r27, 0x80	; 128
 162:	88 83       	st	Y, r24
 164:	99 83       	std	Y+1, r25	; 0x01
 166:	aa 83       	std	Y+2, r26	; 0x02
 168:	bb 83       	std	Y+3, r27	; 0x03
 16a:	9f 77       	andi	r25, 0x7F	; 127
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	ff 90       	pop	r15
 172:	ef 90       	pop	r14
 174:	df 90       	pop	r13
 176:	cf 90       	pop	r12
 178:	bf 90       	pop	r11
 17a:	af 90       	pop	r10
 17c:	9f 90       	pop	r9
 17e:	8f 90       	pop	r8
 180:	08 95       	ret

00000182 <rand_r>:
 182:	b7 df       	rcall	.-146    	; 0xf2 <do_rand>
 184:	08 95       	ret

00000186 <rand>:
 186:	80 e6       	ldi	r24, 0x60	; 96
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	b3 df       	rcall	.-154    	; 0xf2 <do_rand>
 18c:	08 95       	ret

0000018e <srand>:
 18e:	a0 e0       	ldi	r26, 0x00	; 0
 190:	b0 e0       	ldi	r27, 0x00	; 0
 192:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 196:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
 19a:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__data_start+0x2>
 19e:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__data_start+0x3>
 1a2:	08 95       	ret

000001a4 <__mulsi3>:
 1a4:	ee 27       	eor	r30, r30
 1a6:	ff 27       	eor	r31, r31

000001a8 <__mulsi3_helper>:
 1a8:	aa 27       	eor	r26, r26
 1aa:	bb 27       	eor	r27, r27
 1ac:	08 c0       	rjmp	.+16     	; 0x1be <__mulsi3_helper+0x16>
 1ae:	a2 0f       	add	r26, r18
 1b0:	b3 1f       	adc	r27, r19
 1b2:	e4 1f       	adc	r30, r20
 1b4:	f5 1f       	adc	r31, r21
 1b6:	22 0f       	add	r18, r18
 1b8:	33 1f       	adc	r19, r19
 1ba:	44 1f       	adc	r20, r20
 1bc:	55 1f       	adc	r21, r21
 1be:	96 95       	lsr	r25
 1c0:	87 95       	ror	r24
 1c2:	77 95       	ror	r23
 1c4:	67 95       	ror	r22
 1c6:	98 f3       	brcs	.-26     	; 0x1ae <__mulsi3_helper+0x6>
 1c8:	70 40       	sbci	r23, 0x00	; 0
 1ca:	a9 f7       	brne	.-22     	; 0x1b6 <__mulsi3_helper+0xe>
 1cc:	00 97       	sbiw	r24, 0x00	; 0
 1ce:	99 f7       	brne	.-26     	; 0x1b6 <__mulsi3_helper+0xe>
 1d0:	bd 01       	movw	r22, r26
 1d2:	cf 01       	movw	r24, r30
 1d4:	08 95       	ret

000001d6 <__divmodsi4>:
 1d6:	05 2e       	mov	r0, r21
 1d8:	97 fb       	bst	r25, 7
 1da:	16 f4       	brtc	.+4      	; 0x1e0 <__divmodsi4+0xa>
 1dc:	00 94       	com	r0
 1de:	0f d0       	rcall	.+30     	; 0x1fe <__negsi2>
 1e0:	57 fd       	sbrc	r21, 7
 1e2:	05 d0       	rcall	.+10     	; 0x1ee <__divmodsi4_neg2>
 1e4:	14 d0       	rcall	.+40     	; 0x20e <__udivmodsi4>
 1e6:	07 fc       	sbrc	r0, 7
 1e8:	02 d0       	rcall	.+4      	; 0x1ee <__divmodsi4_neg2>
 1ea:	46 f4       	brtc	.+16     	; 0x1fc <__divmodsi4_exit>
 1ec:	08 c0       	rjmp	.+16     	; 0x1fe <__negsi2>

000001ee <__divmodsi4_neg2>:
 1ee:	50 95       	com	r21
 1f0:	40 95       	com	r20
 1f2:	30 95       	com	r19
 1f4:	21 95       	neg	r18
 1f6:	3f 4f       	sbci	r19, 0xFF	; 255
 1f8:	4f 4f       	sbci	r20, 0xFF	; 255
 1fa:	5f 4f       	sbci	r21, 0xFF	; 255

000001fc <__divmodsi4_exit>:
 1fc:	08 95       	ret

000001fe <__negsi2>:
 1fe:	90 95       	com	r25
 200:	80 95       	com	r24
 202:	70 95       	com	r23
 204:	61 95       	neg	r22
 206:	7f 4f       	sbci	r23, 0xFF	; 255
 208:	8f 4f       	sbci	r24, 0xFF	; 255
 20a:	9f 4f       	sbci	r25, 0xFF	; 255
 20c:	08 95       	ret

0000020e <__udivmodsi4>:
 20e:	a1 e2       	ldi	r26, 0x21	; 33
 210:	1a 2e       	mov	r1, r26
 212:	aa 1b       	sub	r26, r26
 214:	bb 1b       	sub	r27, r27
 216:	fd 01       	movw	r30, r26
 218:	0d c0       	rjmp	.+26     	; 0x234 <__udivmodsi4_ep>

0000021a <__udivmodsi4_loop>:
 21a:	aa 1f       	adc	r26, r26
 21c:	bb 1f       	adc	r27, r27
 21e:	ee 1f       	adc	r30, r30
 220:	ff 1f       	adc	r31, r31
 222:	a2 17       	cp	r26, r18
 224:	b3 07       	cpc	r27, r19
 226:	e4 07       	cpc	r30, r20
 228:	f5 07       	cpc	r31, r21
 22a:	20 f0       	brcs	.+8      	; 0x234 <__udivmodsi4_ep>
 22c:	a2 1b       	sub	r26, r18
 22e:	b3 0b       	sbc	r27, r19
 230:	e4 0b       	sbc	r30, r20
 232:	f5 0b       	sbc	r31, r21

00000234 <__udivmodsi4_ep>:
 234:	66 1f       	adc	r22, r22
 236:	77 1f       	adc	r23, r23
 238:	88 1f       	adc	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	1a 94       	dec	r1
 23e:	69 f7       	brne	.-38     	; 0x21a <__udivmodsi4_loop>
 240:	60 95       	com	r22
 242:	70 95       	com	r23
 244:	80 95       	com	r24
 246:	90 95       	com	r25
 248:	9b 01       	movw	r18, r22
 24a:	ac 01       	movw	r20, r24
 24c:	bd 01       	movw	r22, r26
 24e:	cf 01       	movw	r24, r30
 250:	08 95       	ret

00000252 <_exit>:
 252:	f8 94       	cli

00000254 <__stop_program>:
 254:	ff cf       	rjmp	.-2      	; 0x254 <__stop_program>
